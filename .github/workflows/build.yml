# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build Mod and create release draft

on:
  push:
    branches: [ master, "1.18", "1.19", "1.20" ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2
      with:
          cache-disabled: true
          arguments: build --stacktrace --no-daemon
    - name: Upload Mod as artifact
      uses: actions/upload-artifact@v4
      with:
        name: modjars
        path: |
          forge/build/libs/*-forge.jar
          fabric/build/libs/*-fabric.jar
    # Set environment variables
    - name: Export gradle properties for future release
      id: properties
      shell: bash
      run: |
        PROPERTIES="$(./gradlew properties --console=plain -q)"
        VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
        echo "::set-output name=version::$VERSION"


  # Taken from here: https://github.com/JetBrains/intellij-platform-plugin-template/blob/main/.github/workflows/build.yml
  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Generate Changelog
      - name: Generate changelog using
        uses: orhun/git-cliff-action@v3
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --unreleased --tag "v${{ needs.build.outputs.version }}"
      - name: Print changelog
        run: cat "${{ steps.git-cliff.outputs.changelog }}"
      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}
      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ needs.build.outputs.version }}" \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            -F "${{ steps.git-cliff.outputs.changelog }}"
