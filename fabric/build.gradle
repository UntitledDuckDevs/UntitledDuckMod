plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

repositories {
    maven {
        name "Terraformers Maven"
        url "https://maven.terraformersmc.com/releases/"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"

    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modApi "com.terraformersmc:modmenu:${modmenu_version}"
    modApi "curse.maven:jade-324717:${jade_id_fabric}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric-${minecraft_version}"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        displayName = "[Fabric $rootProject.minecraft_version] v$project.version"
        changelog = new File("${rootProject.rootDir.toPath().toString()}/docs/LATEST_CHANGES.md").getText('UTF-8')
        releaseType = "beta" // Optional, use "release", "beta" or "alpha"
        gameVersions = ["1.20.1"]
        gameLoaders = ["fabric"]

        mainPublication remapJar

        relations {
            depends {
                curseforge = "fabric-api"
                modrinth = "fabric-api"
            }
            depends {
                curseforge = "geckolib"
            }
            optional {
                curseforge = "modmenu"
                modrinth = "modmenu"
            }
            optional {
                curseforge = "jade"
                modrinth = "jade"
            }
        }

        if  (System.getenv("CF_TOKEN") != null) {
            curseforge {
                token = System.getenv("CF_TOKEN")
                id = "451766" // Required, must be a string, ID of CurseForge project
            }
        }

        if  (System.getenv("MODRINTH_TOKEN") != null) {
            modrinth {
                token = System.getenv("MODRINTH_TOKEN")
                id = "ojFjz7JF"
                version = "$project.version-$project.name-${rootProject.minecraft_version}"
            }
        }
    }
}
